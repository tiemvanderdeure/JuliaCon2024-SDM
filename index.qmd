---
title: "SpeciesDistributionModels.jl"
subtitle: "an SDM workflow"
author:
  - name: Tiem van der Deure
    orcid:
    email: tiemvanderdeure@gmail.com
    affiliation:
      - name: University of Copenhagen
date: "2024-07-12"
engine: julia
format:
  revealjs:
    theme: [default, style.scss] # beige blood dark default league moon night serif simple sky solarized
    incremental: false
    toc: false
    toc-depth: 1
    slide-number: true
    overview: true
    code-line-numbers: false
    highlight-style: ayu
    include-in-header:
      - text: |
          <style>
          #title-slide .title {
            font-size: 2em;
          }
          </style>
execute:
    echo: true
---

# What is an SDM?

- "Just another word for a regression"

- A type of regression, with:
  - Spatial data
  - Binary data (presence/absence or presence/background)
  - Environmental predictor variables

- A field of research with:
  - Common standards, e.g. ensemble modelling
  - Recurring problems, e.g. spatial bias


# Current tools for SDMs
- Heavily reliant on R with dozens of R packages
- Pros:
  - Very complete
  - Beginner-friendly
  - Documented
- Cons:
  - Slow
  - Not custumisable
  - Horrible syntax at times

# Towards SDMs in Julia
- JuliaGeo
  - E.g. Rasters.extract
- Models
  - E.g. Maxnet
- SpeciesDistributionModels.jl
  - Depends on MLJ and Rasters
  - Aims to make Julia machine learning tools accessible for SDM users

# A typical SDM workflow
- Load environmental data
- Load occurrence data
- Data wrangling 
- Fit a model ensemble
- Evaluate the ensemble
- Predict 

# Environmental data

```{julia}
#| echo: false
if !haskey(ENV, "RASTERDATASOURCES_PATH")
    ENV["RASTERDATASOURCES_PATH"] = ".";
end
using CairoMakie
CairoMakie.activate!(type = "png")
```
\
```{julia}
using Rasters, RasterDataSources, ArchGDAL, NaturalEarth, DataFrames
bio = RasterStack(WorldClim{BioClim}, (1,12))
countries = naturalearth("ne_10m_admin_0_countries") |> DataFrame
australia = subset(countries, :NAME => ByRow(==("Australia"))).geometry
bio_aus = Rasters.trim(mask(bio; with = australia))
```

# Environmental data
```{julia}
using CairoMakie
Rasters.rplot(bio_aus)
```

# Occurrence data
```{julia}
using GBIF2, SpeciesDistributionModels
sp = species_match("Eucalyptus regnans")
occurrences_raw = occurrence_search(sp; year = (1970,2000), country = "AU", hasCoordinate = true, limit = 2000)
occurrences = thin(occurrences_raw.geometry, 5000)

```
# Background points
```{julia}
using StatsBase
bg_indices = sample(findall(boolmask(bio_aus)), 500)
bg_points = DimPoints(bio_aus)[bg_indices]
fig, ax, pl = plot(bio_aus.bio1)
scatter!(ax, occurrences; color = :red)
scatter!(ax, bg_points; color = :grey)
fig
```

# Handling data
```{julia}
using SpeciesDistributionModels
p_data = extract(bio_aus, occurrences; skipmissing = true)
bg_data = bio_aus[bg_indices]
data = sdmdata(p_data, bg_data; resampler = CV(nfolds = 3))
data
```

# Fitting an ensemble
```{julia}
using Maxnet: MaxnetBinaryClassifier
using EvoTrees: EvoTreeClassifier
using MLJGLMInterface: LinearBinaryClassifier
models = (
  maxnet = MaxnetBinaryClassifier(),
  brt = EvoTreeClassifier(),
  glm = LinearBinaryClassifier()
)

ensemble = sdm(data, models)
ensemble
```

# Evaluating an ensemble
```{julia}
import SpeciesDistributionModels as SDM
ev = SDM.evaluate(ensemble; measures = (; auc, accuracy))
ev
```

# Predicting
```{julia}
pred = SDM.predict(ensemble, bio_aus; reducer = mean)
fig, ax, pl = plot(pred; colorrange = (0,1))
```

# What is next for SDMs in Julia?
- SpeciesDistributionModels.jl is very early stage
- We have:
  - Easy interfacing with many models through MLJ
  - Easy access to raster data and operations
- We need:
  - Documentation and tutorials
  - All commonly used tools (e.g. GAMs)
  - Very intuitive and consistent syntax


